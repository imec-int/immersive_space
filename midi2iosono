#!/usr/bin/env node

const midi = require('midi'),
    OSCSender = require('./OSCSender.js'),
    MIDIReceiver = require('./MIDIReceiver.js'),
    fs = require('fs'),
    _ = require('lodash');

// Get command line parameters
var args = process.argv.slice(2);

// Read config
var config;
try {
    config = JSON.parse(fs.readFileSync(args[0] || './config.json', 'utf8'));
} catch (error) {
    console.log('No config file given or found');
    console.log('Details: %s', error);
    process.exit(1);
}

// Setup parameters
var iosonoConfig = config.iosono || {},
    measurements = iosonoConfig.measurements || {
        x: 10,
        y: 10,
        z: 10
    },
    channels = iosonoConfig.channels || 16,
    midiConfig = config.midi || {},
    mapping = midiConfig.mapping || {
        noteOn: {
            x: {
                key: [60, 80]
            },
            y: {
                velocity: [0, 100]
            }
        },
        channelPressure: {
            z: {
                pressure: [0, 100]
            }
        }
    };

// Setup OSC to IOSONO
var oscSender = new OSCSender(iosonoConfig);

// Setup MIDI
var midiReceiver = new MIDIReceiver(midiConfig);

// setup positions
console.log('Initalizing %d channels', channels);
var positions = _.fill(Array(channels), {
    x: 0,
    y: 0,
    z: 0
});

// Send position on each clock signal
midiReceiver.on('clock', function (deltaTime) {
    positions.forEach(function (position, channel) {
        console.log('C %d: Sending %s', channel, JSON.stringify(position))
    });
    if (config.bundled) {
        oscSender.sendBundled(positions);
    } else {
        positions.forEach(oscSender.send, oscSender);
    }
});

// For each event in mapping, create
_.forIn(mapping, function (evtMap, evt) {
    console.log('Initalizing MIDI event %s', evt);
    // For each parameter in event map, create event
    midiReceiver.on(evt, function (channel, data) {
        if (positions[channel]) {
            _.forIn(evtMap, function (cMap, axis) {
                // For each parameter, set the positon according to range and axis
                _.forIn(cMap, function (range, parameter) {
                  if (data[parameter])
                    positions[channel][axis] = measurements[axis] * getPercentageInBounds(data[parameter], range);
                });
            });
        }
    });
});

console.log('midi2iosono ready and running as MIDI device: %s', midiReceiver.name)

function getPercentageInBounds(val, range) {
    var min = range[0],
        max = range[1];

    var p = val - min; // lower bound
    p = p < 0 ? 0 : p;
    p = p > (max - min) ? (max - min) : p;

    return p / (max - min);
}
